--- code 1.txt
+++ code with new ui improvements..txt
@@ -8,9 +8,48 @@
 import "firebase/compat/firestore";

 import { SafeAreaView, SafeAreaProvider } from "react-native-safe-area-context";

 import { Picker } from '@react-native-picker/picker';

+import Animated, { 

+  useSharedValue, 

+  useAnimatedStyle, 

+  withTiming, 

+  withSpring,

+  Easing,

+  runOnJS,

+  interpolate

+} from 'react-native-reanimated';

 

 // ========== CONSTANTS & HELPERS ==========

 

+const colors = {

+  primary: '#2563eb',

+  secondary: '#3b82f6',

+  success: '#22c55e',

+  warning: '#f59e0b',

+  danger: '#ef4444',

+  neutral: {

+    50: '#f8fafc',

+    100: '#f1f5f9',

+    200: '#e2e8f0',

+    300: '#cbd5e1',

+    400: '#94a3b8',

+    500: '#64748b',

+    600: '#475569',

+    700: '#334155',

+    800: '#1e293b',

+    900: '#0f172a',

+  }

+};

+

+const typography = {

+  h1: { fontSize: 28, fontWeight: '700', color: colors.neutral[900] },

+  h2: { fontSize: 24, fontWeight: '600', color: colors.neutral[800] },

+  h3: { fontSize: 20, fontWeight: '600', color: colors.neutral[700] },

+  h4: { fontSize: 18, fontWeight: '600', color: colors.neutral[700] },

+  body: { fontSize: 16, color: colors.neutral[600] },

+  bodyLarge: { fontSize: 18, color: colors.neutral[600] },

+  caption: { fontSize: 14, color: colors.neutral[500] },

+  small: { fontSize: 12, color: colors.neutral[500] },

+};

 

 const commonUKBreeds = [

   "Labrador Retriever",

@@ -184,6 +223,78 @@
   }

 }

 

+// ========== ANIMATED PROGRESS BAR COMPONENT ==========

+const AnimatedProgressBar = ({ progress, color = colors.success, height = 8 }) => {

+  const width = useSharedValue(0);

+

+  useEffect(() => {

+    width.value = withTiming(progress * 100, {

+      duration: 800,

+      easing: Easing.out(Easing.quad),

+    });

+  }, [progress, width]);

+

+  const animatedStyle = useAnimatedStyle(() => {

+    return {

+      width: `${width.value}%`,

+    };

+  });

+

+  return (

+    <View style={[styles.progressBar, { height }]}>

+      <Animated.View

+        style={[

+          styles.progressFill,

+          {

+            backgroundColor: color,

+          },

+          animatedStyle,

+        ]}

+      />

+    </View>

+  );

+};

+

+// ========== ANIMATED ACTIVITY CARD COMPONENT ==========

+const AnimatedActivityCard = ({ children, isCompleted, onPress }) => {

+  const scale = useSharedValue(1);

+  const opacity = useSharedValue(1);

+

+  const handlePress = useCallback(() => {

+    scale.value = withSpring(0.95, { duration: 100 }, () => {

+      scale.value = withSpring(1, { duration: 200 });

+    });

+    

+    // Trigger haptic feedback and call the onPress

+    runOnJS(onPress)();

+  }, [onPress, scale]);

+

+  const animatedStyle = useAnimatedStyle(() => {

+    return {

+      transform: [{ scale: scale.value }],

+      opacity: opacity.value,

+    };

+  });

+

+  useEffect(() => {

+    opacity.value = withTiming(isCompleted ? 0.8 : 1, { duration: 300 });

+  }, [isCompleted, opacity]);

+

+  return (

+    <TouchableOpacity onPress={handlePress} activeOpacity={0.7}>

+      <Animated.View

+        style={[

+          styles.activityCard,

+          isCompleted && styles.completedActivity,

+          animatedStyle,

+        ]}

+      >

+        {children}

+      </Animated.View>

+    </TouchableOpacity>

+  );

+};

+

 // ========== ERROR BOUNDARY ==========

 class ErrorBoundary extends React.Component {

   constructor(props) {

@@ -203,9 +314,9 @@
     if (this.state.hasError) {

       return (

         <View style={styles.errorContainer}>

-          <Feather name="alert-triangle" size={48} color="#ef4444" />

-          <Text style={styles.errorTitle}>Something went wrong</Text>

-          <Text style={styles.errorText}>Please restart the app</Text>

+          <Feather name="alert-triangle" size={48} color={colors.danger} />

+          <Text style={[typography.h3, styles.errorTitle]}>Something went wrong</Text>

+          <Text style={[typography.body, styles.errorText]}>Please restart the app</Text>

           <TouchableOpacity 

             style={styles.errorButton}

             onPress={() => this.setState({ hasError: false })}

@@ -282,10 +393,45 @@
   const [showWeeklyConfetti, setShowWeeklyConfetti] = useState(false);

   const [currentDogAge, setCurrentDogAge] = useState(() => calcDogAge(dogDob, 0, new Date()));

   

+  // Animation values

+  const fadeAnim = useSharedValue(0);

+  const slideAnim = useSharedValue(50);

+  const headerScale = useSharedValue(0.9);

+  

   // Refs for cleanup and optimization

   const syncTimeout = useRef();

   const lastSyncedData = useRef({});

   const dobInputRef = useRef(null);

+

+  // Tab switching animation

+  const animateTabSwitch = useCallback(() => {

+    fadeAnim.value = withTiming(0, { duration: 150 }, () => {

+      slideAnim.value = 30;

+      fadeAnim.value = withTiming(1, { duration: 300 });

+      slideAnim.value = withSpring(0, { damping: 15, stiffness: 200 });

+    });

+  }, [fadeAnim, slideAnim]);

+

+  // Initialize animations

+  useEffect(() => {

+    fadeAnim.value = withTiming(1, { duration: 500 });

+    slideAnim.value = withSpring(0, { damping: 15, stiffness: 100 });

+    headerScale.value = withSpring(1, { damping: 10, stiffness: 100 });

+  }, [fadeAnim, slideAnim, headerScale]);

+

+  // Animated styles

+  const contentAnimatedStyle = useAnimatedStyle(() => {

+    return {

+      opacity: fadeAnim.value,

+      transform: [{ translateY: slideAnim.value }],

+    };

+  });

+

+  const headerAnimatedStyle = useAnimatedStyle(() => {

+    return {

+      transform: [{ scale: headerScale.value }],

+    };

+  });

 

   // Network status effect

   useEffect(() => {

@@ -878,12 +1024,17 @@
     { key: "notes", iconLib: Feather, iconName: "file-text" }

   ];

 

+  const handleTabPress = useCallback((tabKey) => {

+    setViewMode(tabKey);

+    animateTabSwitch();

+  }, [animateTabSwitch]);

+

   // Loading states

   if (familyDogLoading) {

     return (

       <View style={styles.loadingContainer}>

-        <ActivityIndicator size="large" color="#2563eb" />

-        <Text style={styles.loadingText}>Loading…</Text>

+        <ActivityIndicator size="large" color={colors.primary} />

+        <Text style={[typography.body, styles.loadingText]}>Loading…</Text>

       </View>

     );

   }

@@ -893,11 +1044,11 @@
     if (!showDogInput) {

       return (

         <View style={styles.setupContainer}>

-          <Text style={styles.welcomeTitle}>Welcome!</Text>

-          <Text style={styles.setupText}>

+          <Text style={[typography.h1, styles.welcomeTitle]}>Welcome!</Text>

+          <Text style={[typography.body, styles.setupText]}>

             Enter your Family ID to sync training data with your household.

           </Text>

-          <Text style={styles.setupSubtext}>

+          <Text style={[typography.caption, styles.setupSubtext]}>

             Use the same Family ID on all your family's devices. Create a new one or enter an existing ID to join.

           </Text>

           <TextInput

@@ -909,7 +1060,7 @@
           <TouchableOpacity onPress={handleFamilyIdSubmit} style={styles.setupButton}>

             {checkingFamilyId

               ? <ActivityIndicator size="small" color="#fff"/>

-              : <Text style={styles.setupButtonText}>Continue</Text>

+              : <Text style={[typography.body, styles.setupButtonText]}>Continue</Text>

             }

           </TouchableOpacity>

         </View>

@@ -917,8 +1068,8 @@
     } else {

       return (

         <View style={styles.setupContainer}>

-          <Text style={styles.welcomeTitle}>Create a New Family Group</Text>

-          <Text style={styles.setupText}>

+          <Text style={[typography.h1, styles.welcomeTitle]}>Create a New Family Group</Text>

+          <Text style={[typography.body, styles.setupText]}>

             Set your Family ID and Dog's Details (only needed once).

           </Text>

           <TextInput

@@ -963,7 +1114,7 @@
             maxLength={10}

           />

           <TouchableOpacity onPress={handleDogDetailsSubmit} style={styles.setupButton}>

-            <Text style={styles.setupButtonText}>Create Family</Text>

+            <Text style={[typography.body, styles.setupButtonText]}>Create Family</Text>

           </TouchableOpacity>

         </View>

       );

@@ -973,8 +1124,8 @@
   if (loading) {

     return (

       <View style={styles.loadingContainer}>

-        <ActivityIndicator size="large" color="#2563eb" />

-        <Text style={styles.loadingText}>Loading training progress…</Text>

+        <ActivityIndicator size="large" color={colors.primary} />

+        <Text style={[typography.body, styles.loadingText]}>Loading training progress…</Text>

       </View>

     );

   }

@@ -982,11 +1133,14 @@
   return (

     <SafeAreaView style={styles.container} edges={['top', 'bottom']}>

       <View style={styles.mainContent}>

-        <ScrollView contentContainerStyle={styles.scrollContent}>

+        <Animated.ScrollView 

+          contentContainerStyle={styles.scrollContent}

+          style={contentAnimatedStyle}

+        >

           {isOffline && (

             <View style={styles.offlineBanner}>

               <Feather name="wifi-off" size={18} color="#fff" />

-              <Text style={styles.offlineText}>You are offline. Changes will sync when back online.</Text>

+              <Text style={[typography.caption, styles.offlineText]}>You are offline. Changes will sync when back online.</Text>

             </View>

           )}

           

@@ -994,145 +1148,127 @@
             <>

               <ConfettiCannon key="daily-confetti" count={120} origin={{x: 200, y: 0}} fadeOut autoStart />

               <View style={styles.celebrationBanner}>

-                <Feather name="award" size={30} color="#f59e42" />

-                <Text style={styles.celebrationText}>Daily Goal Complete! Well done!</Text>

+                <Feather name="award" size={30} color={colors.warning} />

+                <Text style={[typography.h4, styles.celebrationText]}>Daily Goal Complete! Well done!</Text>

               </View>

             </>

           )}

-          

+

           {showWeeklyConfetti && (

             <>

-              <ConfettiCannon key="weekly-confetti" count={200} origin={{x: 100, y: 0}} fadeOut autoStart />

+              <ConfettiCannon key="weekly-confetti" count={200} origin={{x: 200, y: 0}} fadeOut autoStart />

               <View style={styles.celebrationBanner}>

-                <Feather name="award" size={30} color="#22c55e" />

-                <Text style={styles.celebrationText}>Weekly Goal Achieved! 🎉</Text>

+                <Feather name="star" size={30} color={colors.warning} />

+                <Text style={[typography.h4, styles.celebrationText]}>Week Complete! Amazing progress!</Text>

               </View>

             </>

           )}

-          

-          <View style={styles.header}>

-            <View style={styles.headerContent}>

+

+          {/* Header Section */}

+          <Animated.View style={[styles.headerGradient, headerAnimatedStyle]}>

+            <View style={styles.headerRow}>

               <View style={styles.headerInfo}>

-                <Text style={styles.title}>🐕 {dogName}'s Training Journey</Text>

-                <Text style={styles.subtitle}>

-                  Family ID: <Text style={styles.familyId}>{familyId}</Text>

-                </Text>

-                <Text style={styles.subtitle}>

-                  {dogBreed} • Week {currentWeek} • {trainingStages[currentStage].name}

-                </Text>

-                <Text style={styles.subtitle}>

-                  Age: <Text style={styles.dogAge}>{currentDogAge}</Text>

-                  {"  "}DOB: <Text style={styles.dogDob}>{dogDob}</Text>

+                <Text style={[typography.h2, styles.headerTitle]}>{dogName}</Text>

+                <Text style={[typography.body, styles.headerSubtitle]}>{dogBreed} • {currentDogAge}</Text>

+                <View style={styles.statusContainer}>

+                  <View style={[styles.statusBadge, isOffline ? styles.offlineStatus : styles.onlineStatus]}>

+                    <Feather 

+                      name={isOffline ? "wifi-off" : "wifi"} 

+                      size={14} 

+                      color={isOffline ? colors.danger : colors.success} 

+                    />

+                    <Text style={[typography.small, { color: isOffline ? colors.danger : colors.success, marginLeft: 4 }]}>

+                      {isOffline ? 'Offline' : 'Online'}

+                    </Text>

+                  </View>

+                  {syncing && (

+                    <View style={[styles.statusBadge, { backgroundColor: colors.neutral[100] }]}>

+                      <ActivityIndicator size={12} color={colors.primary} />

+                      <Text style={[typography.small, { color: colors.primary, marginLeft: 4 }]}>Syncing</Text>

+                    </View>

+                  )}

+                </View>

+              </View>

+              <TouchableOpacity onPress={openEditDogModal} style={styles.editButton}>

+                <Feather name="edit-2" size={20} color="#fff" />

+              </TouchableOpacity>

+            </View>

+          </Animated.View>

+

+          {/* Content based on view mode */}

+          {viewMode === "daily" && (

+            <View style={styles.section}>

+              <View style={styles.sectionHeader}>

+                <Text style={[typography.h3, styles.sectionTitle]}>Today's Training</Text>

+                <Text style={[typography.caption, styles.sectionSubtitle]}>

+                  {new Date().toLocaleDateString('en-GB', { 

+                    weekday: 'long', 

+                    year: 'numeric', 

+                    month: 'long', 

+                    day: 'numeric' 

+                  })}

                 </Text>

               </View>

-              <View style={styles.headerStats}>

-                <TouchableOpacity onPress={openEditDogModal} style={styles.editButton}>

-                  <Feather name="edit-3" size={20} color="#6366f1" />

-                </TouchableOpacity>

-                <Text style={styles.completionPercent}>

-                  {Math.round(completionRate * 100)}%

-                </Text>

-                <Text style={styles.completionLabel}>This Week</Text>

-                <Feather name="users" size={24} color="#a3a3a3" />

-              </View>

-            </View>

-            {syncing && (

-              <View style={styles.syncingIndicator}>

-                <ActivityIndicator size="small" color="#2563eb" />

-                <Text style={styles.syncingText}>Syncing…</Text>

-              </View>

-            )}

-          </View>

-

-          {viewMode === "daily" && (

-            <View>

-              <View style={[styles.section, styles.progressSection]}>

+              

+              <View style={styles.progressContainer}>

                 <View style={styles.progressHeader}>

-                  <Feather name="sun" size={22} color="#f59e42" />

-                  <Text style={styles.progressTitle}>Today's Progress</Text>

-                </View>

-                <View style={styles.progressStats}>

-                  <Text style={styles.progressPercent}>

+                  <Text style={[typography.body, { fontWeight: '600' }]}>Daily Progress</Text>

+                  <Text style={[typography.h4, { color: colors.primary }]}>

                     {Math.round(dailyRate * 100)}%

                   </Text>

                 </View>

+                <AnimatedProgressBar progress={dailyRate} />

+                <Text style={[typography.caption, { marginTop: 8 }]}>

+                  {completedDaily} of {allDailyKeys.length} activities completed

+                </Text>

               </View>

-              

-              <View style={styles.section}>

-                <Text style={styles.sectionTitle}>

-                  <Feather name="sunrise" size={18} /> Today's Training Schedule

-                </Text>

-                {Object.entries(dailyRoutine).map(([timeSlot, acts]) => (

-                  <View key={timeSlot} style={styles.timeSlotContainer}>

-                    <Text style={styles.timeSlotTitle}>

-                      <Feather name="clock" size={14} />{" "}

-                      {timeSlot === "play"

-                        ? "Play & Bonding"

-                        : `${timeSlot.charAt(0).toUpperCase() + timeSlot.slice(1)} Routine`}

-                    </Text>

-                    {acts.map((activity, idx) => (

-                      <TouchableOpacity

-                        key={idx}

-                        style={styles.activityRow}

+

+              {Object.entries(dailyRoutine).map(([timeSlot, activities]) => (

+                <View key={timeSlot} style={styles.timeSlotSection}>

+                  <Text style={[typography.h4, styles.timeSlotTitle]}>

+                    {timeSlot.charAt(0).toUpperCase() + timeSlot.slice(1)}

+                  </Text>

+                  {activities.map(activity => {

+                    const key = `daily-${timeSlot}-${activity}`;

+                    const isCompleted = completedToday.includes(key);

+                    return (

+                      <AnimatedActivityCard

+                        key={activity}

+                        isCompleted={isCompleted}

                         onPress={() => toggleDailyActivity(timeSlot, activity)}

                       >

-                        {completedToday.includes(`daily-${timeSlot}-${activity}`) ? (

-                          <MaterialCommunityIcons name="checkbox-marked-circle" color="#22c55e" size={20} />

-                        ) : (

-                          <MaterialCommunityIcons name="checkbox-blank-circle-outline" color="#9ca3af" size={20} />

-                        )}

-                        <Text

-                          style={[

-                            styles.activityText,

-                            completedToday.includes(`daily-${timeSlot}-${activity}`) &&

-                              styles.activityCompleted

-                          ]}

-                        >

-                          {activity}

-                        </Text>

-                      </TouchableOpacity>

-                    ))}

-                  </View>

-                ))}

-              </View>

-              

-              <View style={styles.section}>

-                <Text style={styles.sectionTitle}>

-                  <Feather name="star" size={18} color="#eab308" /> Week {currentWeek} Focus

-                </Text>

-                {(weeklyPlans[currentWeek] || []).map((activity, idx) => (

-                  <TouchableOpacity

-                    key={idx}

-                    style={styles.activityRow}

-                    onPress={() => toggleActivity(currentWeek, activity)}

-                  >

-                    {completedActivities.includes(`${currentWeek}-${activity}`) ? (

-                      <MaterialCommunityIcons name="checkbox-marked-circle" color="#22c55e" size={22} />

-                    ) : (

-                      <MaterialCommunityIcons name="checkbox-blank-circle-outline" color="#9ca3af" size={22} />

-                    )}

-                    <Text

-                      style={[

-                        styles.activityText,

-                        completedActivities.includes(`${currentWeek}-${activity}`) && styles.activityCompleted

-                      ]}

-                    >

-                      {activity}

-                    </Text>

-                  </TouchableOpacity>

-                ))}

-              </View>

-              

-              <View style={styles.section}>

-                <Text style={styles.sectionTitle}>

-                  <Feather name="bookmark" size={18} /> Daily Notes

-                </Text>

+                        <View style={styles.activityContent}>

+                          <Feather

+                            name={isCompleted ? "check-circle" : "circle"}

+                            size={24}

+                            color={isCompleted ? colors.success : colors.neutral[400]}

+                          />

+                          <Text style={[

+                            typography.body,

+                            { 

+                              marginLeft: 12,

+                              color: isCompleted ? colors.success : colors.neutral[700],

+                              textDecorationLine: isCompleted ? 'line-through' : 'none'

+                            }

+                          ]}>

+                            {activity}

+                          </Text>

+                        </View>

+                      </AnimatedActivityCard>

+                    );

+                  })}

+                </View>

+              ))}

+

+              {/* Daily Notes */}

+              <View style={styles.notesSection}>

+                <Text style={[typography.h4, styles.sectionTitle]}>Today's Notes</Text>

                 <TextInput

-                  style={styles.textInput}

+                  placeholder="Add notes about today's training..."

+                  value={dailyNotes[today] || ""}

+                  onChangeText={(text) => addNote(today, text)}

                   multiline

-                  placeholder={`How did ${dogName} do today?`}

-                  value={dailyNotes[selectedDate] || ""}

-                  onChangeText={text => addNote(selectedDate, text)}

+                  style={styles.notesInput}

                 />

               </View>

             </View>

@@ -1140,210 +1276,247 @@
 

           {viewMode === "weekly" && (

             <View style={styles.section}>

-              <View style={styles.weekNavigation}>

-                <TouchableOpacity

-                  onPress={() => setCurrentWeek(w => Math.max(1, w - 1))}

+              <View style={styles.sectionHeader}>

+                <Text style={[typography.h3, styles.sectionTitle]}>Week {currentWeek} Training</Text>

+                <Text style={[typography.caption, styles.sectionSubtitle]}>

+                  {trainingStages[currentStage].name}

+                </Text>

+              </View>

+

+              <View style={styles.progressContainer}>

+                <View style={styles.progressHeader}>

+                  <Text style={[typography.body, { fontWeight: '600' }]}>Weekly Progress</Text>

+                  <Text style={[typography.h4, { color: colors.primary }]}>

+                    {Math.round(completionRate * 100)}%

+                  </Text>

+                </View>

+                <AnimatedProgressBar progress={completionRate} />

+              </View>

+

+              <View style={styles.weekControls}>

+                <TouchableOpacity 

+                  onPress={() => setCurrentWeek(Math.max(1, currentWeek - 1))}

+                  style={[styles.weekButton, currentWeek === 1 && styles.weekButtonDisabled]}

                   disabled={currentWeek === 1}

-                  style={[styles.weekNavButton, currentWeek === 1 && styles.weekNavDisabled]}

                 >

-                  <Feather name="chevron-left" size={22} color="#2563eb" />

-                  <Text style={styles.weekNav}>Previous Week</Text>

+                  <Feather name="chevron-left" size={20} color={currentWeek === 1 ? colors.neutral[400] : colors.primary} />

+                  <Text style={[typography.body, { color: currentWeek === 1 ? colors.neutral[400] : colors.primary }]}>

+                    Previous

+                  </Text>

                 </TouchableOpacity>

-                <Text style={styles.weekTitle}>Week {currentWeek}</Text>

-                <TouchableOpacity

-                  onPress={() => setCurrentWeek(w => Math.min(MAX_WEEKS, w + 1))}

+

+                <View style={styles.weekDisplay}>

+                  <Text style={[typography.h4, { color: colors.primary }]}>Week {currentWeek}</Text>

+                </View>

+

+                <TouchableOpacity 

+                  onPress={() => setCurrentWeek(Math.min(MAX_WEEKS, currentWeek + 1))}

+                  style={[styles.weekButton, currentWeek === MAX_WEEKS && styles.weekButtonDisabled]}

                   disabled={currentWeek === MAX_WEEKS}

-                  style={[styles.weekNavButton, currentWeek === MAX_WEEKS && styles.weekNavDisabled]}

                 >

-                  <Text style={styles.weekNav}>Next Week</Text>

-                  <Feather name="chevron-right" size={22} color="#2563eb" />

+                  <Text style={[typography.body, { color: currentWeek === MAX_WEEKS ? colors.neutral[400] : colors.primary }]}>

+                    Next

+                  </Text>

+                  <Feather name="chevron-right" size={20} color={currentWeek === MAX_WEEKS ? colors.neutral[400] : colors.primary} />

                 </TouchableOpacity>

               </View>

-              

-              <View style={styles.weekCard}>

-                <Text style={styles.weekCardTitle}>Week {currentWeek}</Text>

-                <Text style={styles.weekCardAge}>

-                  Age: <Text style={styles.dogAge}>{calcDogAge(dogDob)}</Text>

-                </Text>

-                {(weeklyPlans[currentWeek] || ["Coming soon..."]).map((activity, idx) => (

-                  <TouchableOpacity

-                    key={idx}

-                    style={styles.activityRow}

+

+              {weeklyPlans[currentWeek]?.map(activity => {

+                const key = `${currentWeek}-${activity}`;

+                const isCompleted = completedActivities.includes(key);

+                return (

+                  <AnimatedActivityCard

+                    key={activity}

+                    isCompleted={isCompleted}

                     onPress={() => toggleActivity(currentWeek, activity)}

                   >

-                    {completedActivities.includes(`${currentWeek}-${activity}`) ? (

-                      <MaterialCommunityIcons name="checkbox-marked-circle" color="#22c55e" size={16} />

-                    ) : (

-                      <MaterialCommunityIcons name="checkbox-blank-circle-outline" color="#9ca3af" size={16} />

-                    )}

-                    <Text

-                      style={[

-                        styles.activityText,

-                        completedActivities.includes(`${currentWeek}-${activity}`) && styles.activityCompleted,

-                        styles.smallActivityText

-                      ]}

-                    >

-                      {activity}

-                    </Text>

-                  </TouchableOpacity>

-                ))}

+                    <View style={styles.activityContent}>

+                      <Feather

+                        name={isCompleted ? "check-circle" : "circle"}

+                        size={24}

+                        color={isCompleted ? colors.success : colors.neutral[400]}

+                      />

+                      <Text style={[

+                        typography.body,

+                        { 

+                          marginLeft: 12,

+                          color: isCompleted ? colors.success : colors.neutral[700],

+                          textDecorationLine: isCompleted ? 'line-through' : 'none'

+                        }

+                      ]}>

+                        {activity}

+                      </Text>

+                    </View>

+                  </AnimatedActivityCard>

+                );

+              })}

+

+              {/* Breed-specific tips */}

+              {breedTips[dogBreed] && (

+                <View style={styles.tipsSection}>

+                  <Text style={[typography.h4, styles.sectionTitle]}>Tips for {dogBreed}</Text>

+                  {breedTips[dogBreed].map((tip, index) => (

+                    <View key={index} style={styles.tipCard}>

+                      <Feather name="lightbulb" size={16} color={colors.warning} />

+                      <Text style={[typography.body, { marginLeft: 12, flex: 1 }]}>{tip}</Text>

+                    </View>

+                  ))}

+                </View>

+              )}

+            </View>

+          )}

+

+          {viewMode === "progress" && (

+            <View style={styles.section}>

+              <Text style={[typography.h3, styles.sectionTitle]}>Training Progress</Text>

+              

+              <View style={styles.progressOverview}>

+                <View style={styles.progressCard}>

+                  <Text style={[typography.h2, { color: colors.primary }]}>

+                    {Math.round(dailyRate * 100)}%

+                  </Text>

+                  <Text style={[typography.body, { color: colors.neutral[600] }]}>Today</Text>

+                  <AnimatedProgressBar progress={dailyRate} height={6} />

+                </View>

+                

+                <View style={styles.progressCard}>

+                  <Text style={[typography.h2, { color: colors.secondary }]}>

+                    {Math.round(completionRate * 100)}%

+                  </Text>

+                  <Text style={[typography.body, { color: colors.neutral[600] }]}>This Week</Text>

+                  <AnimatedProgressBar progress={completionRate} color={colors.secondary} height={6} />

+                </View>

+              </View>

+

+              <View style={styles.stageProgress}>

+                <Text style={[typography.h4, styles.sectionTitle]}>Training Stages</Text>

+                {Object.entries(trainingStages).map(([stage, info]) => {

+                  const stageNum = parseInt(stage);

+                  const isActive = stageNum === currentStage;

+                  const isCompleted = stageNum < currentStage;

+                  

+                  return (

+                    <View key={stage} style={[

+                      styles.stageCard,

+                      isActive && styles.activeStageCard,

+                      isCompleted && styles.completedStageCard

+                    ]}>

+                      <View style={styles.stageHeader}>

+                        <View style={[

+                          styles.stageNumber,

+                          isActive && styles.activeStageNumber,

+                          isCompleted && styles.completedStageNumber

+                        ]}>

+                          <Text style={[

+                            typography.body,

+                            { 

+                              color: isActive || isCompleted ? '#fff' : colors.neutral[600],

+                              fontWeight: '700'

+                            }

+                          ]}>

+                            {stage}

+                          </Text>

+                        </View>

+                        <View style={{ flex: 1, marginLeft: 12 }}>

+                          <Text style={[typography.h4, { color: isActive ? colors.primary : colors.neutral[700] }]}>

+                            {info.name}

+                          </Text>

+                          <Text style={[typography.caption, { color: colors.neutral[500] }]}>

+                            {info.range}

+                          </Text>

+                        </View>

+                        {isCompleted && (

+                          <Feather name="check-circle" size={24} color={colors.success} />

+                        )}

+                        {isActive && (

+                          <Feather name="play-circle" size={24} color={colors.primary} />

+                        )}

+                      </View>

+                    </View>

+                  );

+                })}

               </View>

             </View>

           )}

 

-          {viewMode === "progress" && (

-            <View style={styles.section}>

-              <Text style={styles.sectionTitle}>

-                <Feather name="activity" size={18} color="#22c55e" /> {dogName}'s Progress Journey

-              </Text>

-              <View style={styles.stagesContainer}>

-                {Object.entries(trainingStages).map(([stage, info]) => (

-                  <View

-                    key={stage}

-                    style={[

-                      styles.stageBox,

-                      { backgroundColor: info.color, opacity: currentStage >= stage ? 1 : 0.5 }

-                    ]}

-                  >

-                    <Text style={styles.stageName}>{info.name}</Text>

-                    <Text style={styles.stageRange}>{info.range}</Text>

-                  </View>

-                ))}

-              </View>

-              

-              <Text style={styles.milestonesTitle}>Key Milestones</Text>

-              {[

-                { week: 1, milestone: "House training established", completed: currentWeek >= 4 },

-                { week: 6, milestone: "Basic commands mastered", completed: currentWeek >= 8 },

-                { week: 12, milestone: "Impulse control developed", completed: currentWeek >= 16 },

-                { week: 20, milestone: "Advanced obedience achieved", completed: currentWeek >= 26 },

-                { week: 30, milestone: "Adolescent challenges managed", completed: currentWeek >= 35 }

-              ].map((item, idx) => (

-                <TouchableOpacity

-                  key={idx}

-                  style={styles.milestoneRow}

-                  onPress={() => toggleActivity("milestone", item.milestone)}

-                >

-                  {completedActivities.includes(`milestone-${item.milestone}`) ? (

-                    <MaterialCommunityIcons name="checkbox-marked-circle" color="#22c55e" size={20} />

-                  ) : (

-                    <MaterialCommunityIcons name="checkbox-blank-circle-outline" color="#9ca3af" size={20} />

-                  )}

-                  <Text

-                    style={[

-                      styles.activityText,

-                      completedActivities.includes(`milestone-${item.milestone}`) && styles.activityCompleted

-                    ]}

-                  >

-                    {item.milestone}

-                  </Text>

-                  <Text style={styles.milestoneWeek}>Week {item.week}</Text>

-                </TouchableOpacity>

-              ))}

-            </View>

-          )}

-

           {viewMode === "family" && (

             <View style={styles.section}>

-              <View style={styles.identitySelector}>

-                <Text style={styles.identityTitle}>Set Your Identity</Text>

-                <Text style={styles.identitySubtitle}>

-                  Select who you are on this device to edit your notes:

-                </Text>

-                <View style={styles.identityButtons}>

-                  {family.map(member => (

-                    <TouchableOpacity

-                      key={member.id}

-                      onPress={() => {

-                        setCurrentUserName(member.name);

-                        AsyncStorage.setItem("memberName", member.name);

-                        Alert.alert("Identity Set", `You are now identified as ${member.name} on this device.`);

-                      }}

-                      style={[

-                        styles.identityButton,

-                        currentUserName === member.name && styles.identityButtonActive

-                      ]}

-                    >

-                      <Text style={[

-                        styles.identityButtonText,

-                        currentUserName === member.name && styles.identityButtonTextActive

-                      ]}>

+              <Text style={[typography.h3, styles.sectionTitle]}>Family Members</Text>

+              

+              {family.map(member => (

+                <View key={member.id} style={styles.familyMemberCard}>

+                  {editingMemberId === member.id ? (

+                    <View style={styles.editingRow}>

+                      <TextInput

+                        value={editFamilyName[member.id] || ""}

+                        onChangeText={(text) => 

+                          setEditFamilyName(prev => ({...prev, [member.id]: text}))

+                        }

+                        style={styles.familyEditInput}

+                        autoFocus

+                      />

+                      <TouchableOpacity 

+                        onPress={() => handleSaveFamilyMember(member.id, editFamilyName[member.id])}

+                        style={styles.saveButton}

+                      >

+                        <Feather name="check" size={20} color={colors.success} />

+                      </TouchableOpacity>

+                      <TouchableOpacity 

+                        onPress={() => setEditingMemberId(null)}

+                        style={styles.cancelButton}

+                      >

+                        <Feather name="x" size={20} color={colors.danger} />

+                      </TouchableOpacity>

+                    </View>

+                  ) : (

+                    <View style={styles.memberRow}>

+                      <View style={styles.memberAvatar}>

+                        <Feather name="user" size={20} color={colors.primary} />

+                      </View>

+                      <Text style={[typography.body, { flex: 1, marginLeft: 12 }]}>

                         {member.name}

                       </Text>

-                    </TouchableOpacity>

-                  ))}

+                      <TouchableOpacity 

+                        onPress={() => handleEditFamilyMember(member.id)}

+                        style={styles.editMemberButton}

+                      >

+                                                <Feather name="edit-2" size={16} color={colors.neutral[500]} />

+                      </TouchableOpacity>

+                      <TouchableOpacity 

+                        onPress={() => handleRemoveFamilyMember(member.id)}

+                        style={styles.removeMemberButton}

+                      >

+                        <Feather name="trash-2" size={16} color={colors.danger} />

+                      </TouchableOpacity>

+                    </View>

+                  )}

                 </View>

+              ))}

+

+              <View style={styles.addMemberSection}>

+                <TextInput

+                  placeholder="Add family member name"

+                  value={newFamilyName}

+                  onChangeText={setNewFamilyName}

+                  style={styles.addMemberInput}

+                />

+                <TouchableOpacity 

+                  onPress={handleAddFamilyMember}

+                  style={styles.addMemberButton}

+                >

+                  <Feather name="plus" size={20} color="#fff" />

+                  <Text style={[typography.body, { color: '#fff', marginLeft: 8 }]}>

+                    Add Member

+                  </Text>

+                </TouchableOpacity>

               </View>

 

-              <Text style={styles.sectionTitle}>

-                <Feather name="users" size={18} color="#a78bfa" /> Family Collaboration

-              </Text>

-              

-              <View>

-                <Text style={styles.familyTitle}>Training Team</Text>

-                {family.map((member, idx) => (

-                  <View key={member.id} style={styles.familyRow}>

-                    <Ionicons name="person-circle" size={28} color="#2563eb" />

-                    {editingMemberId === member.id ? (

-                      <TextInput

-                        style={styles.familyEditInput}

-                        value={editFamilyName[member.id]}

-                        onChangeText={text =>

-                          setEditFamilyName(n => ({ ...n, [member.id]: text }))

-                        }

-                        autoFocus

-                        onSubmitEditing={() => handleSaveFamilyMember(member.id, editFamilyName[member.id])}

-                        onBlur={() => handleSaveFamilyMember(member.id, editFamilyName[member.id])}

-                      />

-                    ) : (

-                      <TouchableOpacity style={styles.familyNameContainer} onLongPress={() => handleEditFamilyMember(member.id)}>

-                        <Text style={styles.familyName}>{member.name}</Text>

-                      </TouchableOpacity>

-                    )}

-                    <Text style={styles.familyStatus}>Active</Text>

-                    <TouchableOpacity onPress={() => handleEditFamilyMember(member.id)} style={styles.familyEditButton}>

-                      <Feather name="edit" size={18} color="#888" />

-                    </TouchableOpacity>

-                    <TouchableOpacity onPress={() => handleRemoveFamilyMember(member.id)} style={styles.familyDeleteButton}>

-                      <Feather name="trash-2" size={18} color="#dc2626" />

-                    </TouchableOpacity>

-                  </View>

-                ))}

-                

-                <View style={styles.addFamilyContainer}>

-                  <TextInput

-                    style={styles.addFamilyInput}

-                    placeholder="Add new member..."

-                    value={newFamilyName}

-                    onChangeText={setNewFamilyName}

-                    onSubmitEditing={handleAddFamilyMember}

-                  />

-                  <TouchableOpacity onPress={handleAddFamilyMember} style={styles.addFamilyButton}>

-                    <Feather name="plus" size={20} color="#fff" />

-                  </TouchableOpacity>

-                </View>

-              </View>

-              

-              <View style={styles.syncInfo}>

-                <View style={styles.syncDot} />

-                <Text style={styles.syncText}>All data synced across devices</Text>

-              </View>

-              <Text style={styles.syncSubtext}>

-                Training progress, notes, and schedules are automatically shared with all family members.

-              </Text>

-              

-              <View style={styles.familyActions}>

-                <TouchableOpacity style={styles.editDogButton} onPress={openEditDogModal}>

-                  <Feather name="edit-3" size={16} color="#6366f1" />

-                  <Text style={styles.editDogText}>Edit Dog Info</Text>

-                </TouchableOpacity>

-                

-                <TouchableOpacity

-                  style={styles.logoutButton}

-                  onPress={handleLogout}

-                >

-                  <Feather name="log-out" size={16} color="#fff" />

-                  <Text style={styles.logoutText}>Log Out</Text>

+              <View style={styles.settingsSection}>

+                <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>

+                  <Feather name="log-out" size={20} color={colors.danger} />

+                  <Text style={[typography.body, { color: colors.danger, marginLeft: 8 }]}>

+                    Logout & Reset

+                  </Text>

                 </TouchableOpacity>

               </View>

             </View>

@@ -1351,940 +1524,985 @@
 

           {viewMode === "notes" && (

             <View style={styles.section}>

-              <Text style={styles.sectionTitle}>

-                <Feather name="file-text" size={18} color="#2563eb" /> Shared Notes

-              </Text>

+              <Text style={[typography.h3, styles.sectionTitle]}>Shared Notes</Text>

               

-              <View style={styles.addNoteContainer}>

+              <View style={styles.addNoteSection}>

                 <TextInput

-                  style={styles.addNoteInput}

-                  placeholder="Add a note for your family…"

+                  placeholder="Add a note to share with family..."

                   value={newSharedNote}

                   onChangeText={setNewSharedNote}

-                  onSubmitEditing={handleAddSharedNote}

-                  returnKeyType="done"

+                  multiline

+                  style={styles.addNoteInput}

                 />

-                <TouchableOpacity

+                <TouchableOpacity 

                   onPress={handleAddSharedNote}

-                  style={[styles.addNoteButton, !newSharedNote.trim() && styles.addNoteButtonDisabled]}

+                  style={styles.addNoteButton}

                   disabled={!newSharedNote.trim()}

                 >

-                  <Text style={styles.addNoteButtonText}>Add Note</Text>

+                  <Feather name="send" size={20} color="#fff" />

                 </TouchableOpacity>

               </View>

-              

+

               {notesLoading ? (

-                <ActivityIndicator size="small" color="#2563eb" />

-              ) : sharedNotes && sharedNotes.length > 0 ? (

-                sharedNotes.map(note => (

-                  <View key={note.id} style={styles.noteCard}>

-                    {editingNoteId === note.id ? (

-                      <>

-                        <TextInput

-                          style={styles.textInput}

-                          multiline

-                          value={editingNoteText}

-                          onChangeText={setEditingNoteText}

-                          autoFocus

-                        />

-                        <View style={styles.noteEditActions}>

-                          <TouchableOpacity 

-                            onPress={() => setEditingNoteId(null)} 

-                            style={styles.noteCancelButton}

-                          >

-                            <Text style={styles.noteCancelText}>Cancel</Text>

-                          </TouchableOpacity>

-                          <TouchableOpacity 

-                            onPress={() => saveNoteEdit(note.id)}

-                            style={styles.noteSaveButton}

-                          >

-                            <Text style={styles.noteSaveText}>Save</Text>

-                          </TouchableOpacity>

+                <View style={styles.notesLoadingContainer}>

+                  <ActivityIndicator size="small" color={colors.primary} />

+                  <Text style={[typography.caption, { marginLeft: 8 }]}>Loading notes...</Text>

+                </View>

+              ) : (

+                <View style={styles.notesList}>

+                  {sharedNotes.length === 0 ? (

+                    <View style={styles.emptyNotesContainer}>

+                      <Feather name="message-circle" size={48} color={colors.neutral[300]} />

+                      <Text style={[typography.body, { color: colors.neutral[500], textAlign: 'center', marginTop: 16 }]}>

+                        No shared notes yet. Be the first to add one!

+                      </Text>

+                    </View>

+                  ) : (

+                    sharedNotes.map(note => (

+                      <View key={note.id} style={styles.noteCard}>

+                        <View style={styles.noteHeader}>

+                          <View style={styles.noteAuthor}>

+                            <Feather name="user" size={16} color={colors.primary} />

+                            <Text style={[typography.caption, { marginLeft: 6, color: colors.primary }]}>

+                              {note.author}

+                            </Text>

+                          </View>

+                          <View style={styles.noteActions}>

+                            <Text style={[typography.small, { color: colors.neutral[400] }]}>

+                              {new Date(note.timestamp).toLocaleDateString()}

+                            </Text>

+                            {note.authorId === currentUserName && (

+                              <>

+                                <TouchableOpacity 

+                                  onPress={() => {

+                                    setEditingNoteId(note.id);

+                                    setEditingNoteText(note.text);

+                                  }}

+                                  style={styles.noteActionButton}

+                                >

+                                  <Feather name="edit-2" size={16} color={colors.neutral[500]} />

+                                </TouchableOpacity>

+                                <TouchableOpacity 

+                                  onPress={() => {

+                                    Alert.alert(

+                                      "Delete Note",

+                                      "Are you sure you want to delete this note?",

+                                      [

+                                        { text: "Cancel", style: "cancel" },

+                                        {

+                                          text: "Delete",

+                                          style: "destructive",

+                                          onPress: () => {

+                                            const updatedNotes = sharedNotes.filter(n => n.id !== note.id);

+                                            setSharedNotes(updatedNotes);

+                                            db.collection("families").doc(familyId).set(

+                                              { sharedNotes: updatedNotes },

+                                              { merge: true }

+                                            );

+                                          }

+                                        }

+                                      ]

+                                    );

+                                  }}

+                                  style={styles.noteActionButton}

+                                >

+                                  <Feather name="trash-2" size={16} color={colors.danger} />

+                                </TouchableOpacity>

+                              </>

+                            )}

+                          </View>

                         </View>

-                      </>

-                    ) : (

-                      <>

-                        <Text style={styles.noteText}>{note.text}</Text>

-                        <View style={styles.noteFooter}>

-                          <Text style={styles.noteAuthor}>By {note.author}</Text>

-                          <View style={styles.noteActions}>

-                            {note.author === currentUserName && (

+                        

+                        {editingNoteId === note.id ? (

+                          <View style={styles.editNoteContainer}>

+                            <TextInput

+                              value={editingNoteText}

+                              onChangeText={setEditingNoteText}

+                              multiline

+                              style={styles.editNoteInput}

+                              autoFocus

+                            />

+                            <View style={styles.editNoteActions}>

+                              <TouchableOpacity 

+                                onPress={() => saveNoteEdit(note.id)}

+                                style={styles.saveNoteButton}

+                              >

+                                <Feather name="check" size={16} color="#fff" />

+                                <Text style={[typography.caption, { color: '#fff', marginLeft: 4 }]}>Save</Text>

+                              </TouchableOpacity>

                               <TouchableOpacity 

                                 onPress={() => {

-                                  setEditingNoteId(note.id);

-                                  setEditingNoteText(note.text);

+                                  setEditingNoteId(null);

+                                  setEditingNoteText("");

                                 }}

-                                style={styles.noteEditButton}

+                                style={styles.cancelNoteButton}

                               >

-                                <Feather name="edit-2" size={16} color="#6366f1" />

+                                <Feather name="x" size={16} color={colors.neutral[600]} />

+                                <Text style={[typography.caption, { color: colors.neutral[600], marginLeft: 4 }]}>Cancel</Text>

                               </TouchableOpacity>

-                            )}

-                            <Text style={styles.noteTimestamp}>

-                              {note.timestamp ? new Date(note.timestamp).toLocaleString() : ""}

-                              {note.edited && " (edited)"}

-                            </Text>

+                            </View>

                           </View>

-                        </View>

-                      </>

-                    )}

-                  </View>

-                ))

-              ) : (

-                <Text style={styles.noNotesText}>No notes yet. Be the first to add one!</Text>

+                        ) : (

+                          <Text style={[typography.body, styles.noteText]}>{note.text}</Text>

+                        )}

+                        

+                        {note.edited && (

+                          <Text style={[typography.small, { color: colors.neutral[400], fontStyle: 'italic', marginTop: 8 }]}>

+                            Edited {new Date(note.editTimestamp).toLocaleDateString()}

+                          </Text>

+                        )}

+                      </View>

+                    ))

+                  )}

+                </View>

               )}

-              

-              <View style={styles.tipsBox}>

-                <Text style={styles.tipsTitle}>

-                  <Feather name="book" size={18} color="#fff" /> {dogName}'s Training Tips

-                </Text>

-                <Text style={styles.tip}>

-                  <Text style={styles.tipLabel}>Mental Stimulation: </Text>

-                  {dogBreed || "Border Collies"} need mental challenges. Use puzzle toys and training games daily.

-                </Text>

-                <Text style={styles.tip}>

-                  <Text style={styles.tipLabel}>Positive Reinforcement: </Text>

-                  Use treats, praise, and play. End sessions on a successful note.

-                </Text>

-                <Text style={styles.tip}>

-                  <Text style={styles.tipLabel}>Consistency: </Text>

-                  Use the same commands and routines. A tired brain is better than a tired body!

-                </Text>

-                                {breedTips[dogBreed] && (

-                  <>

-                    <Text style={styles.breedTipsTitle}>

-                      Tips for {dogBreed}:

-                    </Text>

-                    {breedTips[dogBreed].map((tip, idx) => (

-                      <Text key={idx} style={styles.tip}>

-                        {tip}

-                      </Text>

-                    ))}

-                  </>

-                )}

-              </View>

             </View>

           )}

-

-         {/* App version footer */}

-<View style={styles.appFooter}>

-  <Text style={styles.appVersion}>v1.0.1 • Dog Training Tracker</Text>

-  <Text style={styles.currentDateTime}>

-    Current: {new Date().toISOString().slice(0, 19).replace('T', ' ')} UTC

-  </Text>

-</View>

-        </ScrollView>

-        

- <View style={styles.tabBar}>

-  {navigationTabs.map(tab => (

-    <TouchableOpacity

-      key={tab.key}

-      style={[styles.tabButton, viewMode === tab.key && styles.tabActive]}

-      onPress={() => setViewMode(tab.key)}

-    >

-      <tab.iconLib

-        name={tab.iconName}

-        size={22}

-        color={viewMode === tab.key ? "#ffffff" : "#1e40af"} // White active, dark blue inactive

-      />

-      <Text

-        style={{

-          fontSize: 12,

-          marginTop: 2,

-          color: viewMode === tab.key ? "#ffffff" : "#1e40af", // White active, dark blue inactive

-          fontWeight: viewMode === tab.key ? "600" : "normal"

-        }}

+        </Animated.ScrollView>

+

+        {/* Bottom Navigation */}

+        <View style={styles.tabBar}>

+          {navigationTabs.map(tab => (

+            <TouchableOpacity

+              key={tab.key}

+              style={[styles.tabButton, viewMode === tab.key && styles.tabActive]}

+              onPress={() => handleTabPress(tab.key)}

+            >

+              <tab.iconLib

+                name={tab.iconName}

+                size={22}

+                color={viewMode === tab.key ? "#ffffff" : "#1e40af"}

+              />

+              <Text

+                style={{

+                  fontSize: 12,

+                  marginTop: 2,

+                  color: viewMode === tab.key ? "#ffffff" : "#1e40af",

+                  fontWeight: viewMode === tab.key ? "600" : "normal"

+                }}

+              >

+                {tab.key.charAt(0).toUpperCase() + tab.key.slice(1)}

+              </Text>

+            </TouchableOpacity>

+          ))}

+        </View>

+      </View>

+

+      {/* Edit Dog Modal */}

+      <Modal

+        visible={editDogModal}

+        animationType="slide"

+        transparent={true}

+        onRequestClose={() => setEditDogModal(false)}

       >

-        {tab.key.charAt(0).toUpperCase() + tab.key.slice(1)}

-      </Text>

-    </TouchableOpacity>

-  ))}

-</View>

-        

-        <Modal visible={editDogModal} transparent animationType="slide">

-          <View style={styles.centeredView}>

-            <View style={styles.modalView}>

-              <Text style={styles.modalTitle}>

-                Edit {dogName}'s Information

-              </Text>

+        <View style={styles.modalOverlay}>

+          <View style={styles.modalContent}>

+            <View style={styles.modalHeader}>

+              <Text style={[typography.h3, styles.modalTitle]}>Edit Dog Info</Text>

+              <TouchableOpacity 

+                onPress={() => setEditDogModal(false)}

+                style={styles.modalCloseButton}

+              >

+                <Feather name="x" size={24} color={colors.neutral[500]} />

+              </TouchableOpacity>

+            </View>

+

+            <View style={styles.modalForm}>

+              <Text style={[typography.body, styles.inputLabel]}>Dog Name</Text>

               <TextInput

-                placeholder="Dog Name"

                 value={editDogName}

                 onChangeText={setEditDogName}

                 style={styles.modalInput}

+                placeholder="Enter dog name"

               />

-             <View style={styles.pickerContainer}>

-  <Picker

-    selectedValue={editDogBreed}

-    onValueChange={(itemValue) => setEditDogBreed(itemValue)}

-    style={styles.picker}

-  >

-    <Picker.Item label="Select Dog Breed..." value="" />

-    {commonUKBreeds.map(breed => (

-      <Picker.Item key={breed} label={breed} value={breed} />

-    ))}

-    <Picker.Item label="Other" value="Other" />

-  </Picker>

-</View>

+

+              <Text style={[typography.body, styles.inputLabel]}>Breed</Text>

+              <View style={styles.pickerContainer}>

+                <Picker

+                  selectedValue={editDogBreed}

+                  onValueChange={(itemValue) => setEditDogBreed(itemValue)}

+                  style={styles.picker}

+                >

+                  <Picker.Item label="Select Dog Breed..." value="" />

+                  {commonUKBreeds.map(breed => (

+                    <Picker.Item key={breed} label={breed} value={breed} />

+                  ))}

+                  <Picker.Item label="Other" value="Other" />

+                </Picker>

+              </View>

+

               {editDogBreed === "Other" && (

-                <TextInput

-                  placeholder="Type breed"

-                  value={editDogBreedOther}

-                  onChangeText={setEditDogBreedOther}

-                  style={styles.modalInput}

-                />

+                <>

+                  <Text style={[typography.body, styles.inputLabel]}>Specify Breed</Text>

+                  <TextInput

+                    value={editDogBreedOther}

+                    onChangeText={setEditDogBreedOther}

+                    style={styles.modalInput}

+                    placeholder="Enter breed name"

+                  />

+                </>

               )}

+

+              <Text style={[typography.body, styles.inputLabel]}>Date of Birth</Text>

               <TextInput

-                placeholder="Date of Birth (YYYY-MM-DD)"

                 value={editDogDob}

                 onChangeText={setEditDogDob}

+                style={styles.modalInput}

+                placeholder="YYYY-MM-DD"

                 keyboardType={Platform.OS === "ios" ? "numbers-and-punctuation" : "numeric"}

-                style={styles.modalInput}

                 maxLength={10}

               />

+

               <View style={styles.modalActions}>

-                <TouchableOpacity

+                <TouchableOpacity 

+                  onPress={() => setEditDogModal(false)}

                   style={styles.modalCancelButton}

-                  onPress={() => setEditDogModal(false)}

                 >

-                  <Text style={styles.modalCancelText}>Cancel</Text>

+                  <Text style={[typography.body, styles.modalCancelText]}>Cancel</Text>

                 </TouchableOpacity>

                 <TouchableOpacity 

+                  onPress={saveDogInfo}

                   style={styles.modalSaveButton}

-                  onPress={saveDogInfo}

                 >

-                  <Text style={styles.modalSaveText}>Save Changes</Text>

+                  <Text style={[typography.body, styles.modalSaveText]}>Save Changes</Text>

                 </TouchableOpacity>

               </View>

             </View>

           </View>

-        </Modal>

-      </View>

+        </View>

+      </Modal>

     </SafeAreaView>

   );

 }

 

+// ========== MAIN EXPORT ==========

+export default function App() {

+  return (

+    <SafeAreaProvider>

+      <ErrorBoundary>

+        <MainApp />

+      </ErrorBoundary>

+    </SafeAreaProvider>

+  );

+}

+

+// ========== ENHANCED STYLES ==========

 const styles = StyleSheet.create({

-  // Error boundary styles

-  errorContainer: {

-    flex: 1,

-    justifyContent: "center",

-    alignItems: "center",

-    padding: 20,

-    backgroundColor: "#f9fafb",

-  },

-  errorTitle: {

-    fontSize: 20,

-    fontWeight: "bold",

-    marginTop: 16,

-    marginBottom: 8,

-    color: "#ef4444",

-  },

-  errorText: {

-    fontSize: 16,

-    color: "#6b7280",

-    textAlign: "center",

-    marginBottom: 20,

-  },

-  errorButton: {

-    backgroundColor: "#2563eb",

-    paddingHorizontal: 20,

-    paddingVertical: 10,

-    borderRadius: 6,

-  },

-  errorButtonText: {

-    color: "#fff",

-    fontWeight: "bold",

-  },

-

-  // Loading and setup screens

-  loadingContainer: {

-    flex: 1,

-    justifyContent: "center",

-    alignItems: "center",

-  },

-  loadingText: {

-    marginTop: 16,

-  },

-  setupContainer: {

-    flex: 1,

-    justifyContent: "center",

-    alignItems: "center",

-    padding: 32,

-  },

-  welcomeTitle: {

-    fontSize: 20,

-    fontWeight: "bold",

-    marginBottom: 24,

-  },

-  setupText: {

-    fontSize: 16,

-    marginBottom: 8,

-    textAlign: "center",

-  },

-  setupSubtext: {

-    fontSize: 14,

-    marginBottom: 16,

-    color: "#555",

-    textAlign: "center",

-  },

-  setupInput: {

-    borderWidth: 1,

-    borderColor: "#ccc",

-    padding: 10,

-    marginBottom: 12,

-    borderRadius: 6,

-    width: "100%",

-  },

-  disabledInput: {

-    backgroundColor: "#eee",

-  },

-  setupButton: {

-    backgroundColor: "#2563eb",

-    padding: 12,

-    borderRadius: 6,

-    width: "100%",

-    alignItems: "center",

-  },

-  setupButtonText: {

-    color: "#fff",

-    fontWeight: "bold",

-  },

-  pickerInput: {

-    borderWidth: 1,

-    borderColor: "#ccc",

-    padding: 10,

-    marginBottom: 12,

-    borderRadius: 6,

-    width: "100%",

-    fontSize: 16,

-  },

-

-  // Main app styles

   container: {

     flex: 1,

-    backgroundColor: "#f3f4f6",

+    backgroundColor: colors.neutral[50],

   },

   mainContent: {

     flex: 1,

   },

   scrollContent: {

-    padding: 10,

-    paddingBottom: 100,

-  },

-

-  // Banners

-  offlineBanner: {

-    backgroundColor: "#ef4444",

-    padding: 8,

-    flexDirection: "row",

-    alignItems: "center",

-    borderRadius: 6,

-    marginBottom: 8,

-  },

-  offlineText: {

-    color: "#fff",

-    fontWeight: "500",

-    marginLeft: 6,

-  },

-  celebrationBanner: {

-    backgroundColor: "#fef3c7",

-    padding: 12,

-    flexDirection: "row",

-    alignItems: "center",

-    borderRadius: 6,

-    marginBottom: 8,

-    justifyContent: "center",

-    borderWidth: 1,

-    borderColor: "#f59e0b",

-  },

-  celebrationText: {

-    color: "#92400e",

-    fontWeight: "bold",

-    fontSize: 16,

-    marginLeft: 6,

-  },

-

-  // Header with LIGHT GREEN background

-  header: {

-    marginBottom: 16,

-    padding: 10,

-    backgroundColor: "#bbf7d0", // Light green background

-    borderRadius: 8,

-    elevation: 1,

-  },

-  headerContent: {

-    flexDirection: "row",

-    justifyContent: "space-between",

-    alignItems: "center",

+    paddingBottom: 100, // Space for tab bar

+    paddingHorizontal: 16,

+  },

+

+  // Enhanced header with gradient effect

+  headerGradient: {

+    backgroundColor: colors.primary,

+    borderRadius: 16,

+    padding: 20,

+    marginVertical: 16,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 4 },

+    shadowOpacity: 0.15,

+    shadowRadius: 12,

+    elevation: 8,

+  },

+  headerRow: {

+    flexDirection: 'row',

+    justifyContent: 'space-between',

+    alignItems: 'flex-start',

   },

   headerInfo: {

     flex: 1,

   },

-  title: {

-    fontSize: 20,

-    fontWeight: "bold",

-    marginBottom: 2,

-  },

-  subtitle: {

-    fontSize: 14,

-    color: "#6b7280",

-    marginBottom: 2,

-  },

-  familyId: {

-    color: "#2563eb",

-  },

-  dogAge: {

-    color: "#16a34a",

-    fontWeight: "bold",

-  },

-  dogDob: {

-    color: "#555",

-  },

-  headerStats: {

-    alignItems: "center",

+  headerTitle: {

+    color: '#fff',

+    marginBottom: 4,

+  },

+  headerSubtitle: {

+    color: colors.neutral[200],

+    marginBottom: 12,

+  },

+  statusContainer: {

+    flexDirection: 'row',

+    gap: 8,

+  },

+  statusBadge: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    paddingHorizontal: 8,

+    paddingVertical: 4,

+    borderRadius: 12,

+    backgroundColor: colors.neutral[100],

+  },

+  onlineStatus: {

+    backgroundColor: '#dcfce7',

+  },

+  offlineStatus: {

+    backgroundColor: '#fee2e2',

   },

   editButton: {

-    marginBottom: 2,

-  },

-  completionPercent: {

-    color: "#2563eb",

-    fontWeight: "bold",

-    fontSize: 24,

-  },

-  completionLabel: {

-    color: "#6b7280",

-    fontSize: 12,

-  },

-  syncingIndicator: {

-    flexDirection: "row",

-    alignItems: "center",

-    marginTop: 8,

-  },

-  syncingText: {

-    marginLeft: 6,

-    color: "#2563eb",

-  },

-

-  // Sections

+    backgroundColor: 'rgba(255,255,255,0.2)',

+    borderRadius: 12,

+    padding: 12,

+  },

+

+  // Enhanced sections with cards

   section: {

-    backgroundColor: "#fff",

+    marginVertical: 8,

+  },

+  sectionHeader: {

+    marginBottom: 16,

+  },

+  sectionTitle: {

+    marginBottom: 4,

+  },

+  sectionSubtitle: {

+    color: colors.neutral[500],

+  },

+

+  // Enhanced progress components

+  progressContainer: {

+    backgroundColor: '#fff',

+    borderRadius: 16,

+    padding: 20,

+    marginBottom: 20,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.08,

+    shadowRadius: 8,

+    elevation: 4,

+  },

+  progressHeader: {

+    flexDirection: 'row',

+    justifyContent: 'space-between',

+    alignItems: 'center',

+    marginBottom: 12,

+  },

+  progressBar: {

+    height: 8,

+    backgroundColor: colors.neutral[200],

+    borderRadius: 4,

+    overflow: 'hidden',

+  },

+  progressFill: {

+    height: '100%',

+    borderRadius: 4,

+  },

+  progressOverview: {

+    flexDirection: 'row',

+    gap: 16,

+    marginBottom: 24,

+  },

+  progressCard: {

+    flex: 1,

+    backgroundColor: '#fff',

+    borderRadius: 16,

+    padding: 20,

+    alignItems: 'center',

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.08,

+    shadowRadius: 8,

+    elevation: 4,

+  },

+

+  // Enhanced activity cards

+  activityCard: {

+    backgroundColor: '#fff',

+    borderRadius: 12,

+    padding: 16,

+    marginVertical: 4,

+    borderLeftWidth: 4,

+    borderLeftColor: colors.primary,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  completedActivity: {

+    backgroundColor: '#f0fdf4',

+    borderLeftColor: colors.success,

+  },

+  activityContent: {

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+

+  // Time slot sections

+  timeSlotSection: {

+    marginBottom: 24,

+  },

+  timeSlotTitle: {

+    marginBottom: 12,

+    color: colors.primary,

+  },

+

+  // Week controls

+  weekControls: {

+    flexDirection: 'row',

+    justifyContent: 'space-between',

+    alignItems: 'center',

+    marginBottom: 20,

+    backgroundColor: '#fff',

+    borderRadius: 12,

+    padding: 16,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  weekButton: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    paddingVertical: 8,

+    paddingHorizontal: 12,

     borderRadius: 8,

+  },

+  weekButtonDisabled: {

+    opacity: 0.5,

+  },

+  weekDisplay: {

+    alignItems: 'center',

+  },

+

+  // Stage progress

+  stageProgress: {

+    marginTop: 24,

+  },

+  stageCard: {

+    backgroundColor: '#fff',

+    borderRadius: 12,

     padding: 16,

-    marginBottom: 16,

-    elevation: 1,

-  },

-  sectionTitle: {

-    fontSize: 16,

-    fontWeight: "bold",

-    marginBottom: 10,

-  },

-  progressSection: {

-    marginBottom: 8,

-    flexDirection: "row",

-    alignItems: "center",

-    justifyContent: "space-between",

-  },

-  progressHeader: {

-    flexDirection: "row",

-    alignItems: "center",

-  },

-  progressTitle: {

-    marginLeft: 8,

-    fontWeight: "bold",

-    fontSize: 16,

-  },

-  progressStats: {

-    alignItems: "center",

-  },

-  progressPercent: {

-    color: "#f59e42",

-    fontWeight: "bold",

-    fontSize: 22,

-  },

-

-  // Time slots and activities

-  timeSlotContainer: {

-    marginBottom: 15,

-  },

-  timeSlotTitle: {

-    fontWeight: "600",

-    marginBottom: 5,

-  },

-  activityRow: {

-    flexDirection: "row",

-    alignItems: "center",

-    paddingVertical: 6,

-  },

-  activityText: {

-    marginLeft: 8,

-    fontSize: 15,

-  },

-  smallActivityText: {

-    fontSize: 14,

-  },

-  activityCompleted: {

-    color: "#22c55e",

-    textDecorationLine: "line-through",

-    fontStyle: "italic",

-  },

-

-  // Text input

-  textInput: {

-    borderWidth: 1,

-    borderColor: "#d1d5db",

-    borderRadius: 6,

-    padding: 10,

-    minHeight: 80,

-    backgroundColor: "#f9fafb",

-  },

-

-  // Week navigation

-  weekNavigation: {

-    flexDirection: "row",

-    alignItems: "center",

-    justifyContent: "space-between",

-    marginBottom: 10,

-  },

-  weekNavButton: {

-    flexDirection: "row",

-    alignItems: "center",

-  },

-  weekNavDisabled: {

-    opacity: 0.3,

-  },

-  weekNav: {

-    color: "#2563eb",

-    fontWeight: "500",

-  },

-  weekTitle: {

-    fontWeight: "bold",

-    fontSize: 18,

-    color: "#2563eb",

-  },

-  weekCard: {

-    borderWidth: 1,

-    borderColor: "#2563eb",

-    backgroundColor: "#dbeafe",

-    borderRadius: 8,

-    padding: 12,

-  },

-  weekCardTitle: {

-    fontWeight: "bold",

-  },

-  weekCardAge: {

-    fontSize: 14,

-    marginBottom: 5,

-  },

-

-  // Progress stages

-  stagesContainer: {

-    flexDirection: "row",

-    flexWrap: "wrap",

-    marginBottom: 10,

-  },

-  stageBox: {

-    padding: 8,

-    borderRadius: 6,

-    margin: 4,

-    minWidth: 100,

-  },

-  stageName: {

-    fontWeight: "600",

-  },

-  stageRange: {

-    fontSize: 12,

-  },

-  milestonesTitle: {

-    fontWeight: "bold",

-    marginBottom: 8,

-  },

-  milestoneRow: {

-    flexDirection: "row",

-    alignItems: "center",

-    paddingVertical: 6,

-  },

-  milestoneWeek: {

-    marginLeft: "auto",

-    color: "#6b7280",

-    fontSize: 12,

-  },

-

-  // Family section

-  identitySelector: {

-    marginBottom: 16,

-    backgroundColor: "#f0f9ff",

-    padding: 12,

-    borderRadius: 8,

-  },

-  identityTitle: {

-    fontSize: 16,

-    fontWeight: "bold",

-    marginBottom: 4,

-  },

-  identitySubtitle: {

-    fontSize: 14,

-    color: "#4b5563",

-    marginBottom: 8,

-  },

-  identityButtons: {

-    flexDirection: "row",

-    flexWrap: "wrap",

-  },

-  identityButton: {

-    backgroundColor: "#e5e7eb",

-    padding: 8,

-    borderRadius: 6,

-    marginRight: 8,

-    marginBottom: 8,

-  },

-  identityButtonActive: {

-    backgroundColor: "#2563eb",

-  },

-  identityButtonText: {

-    color: "#374151",

-  },

-  identityButtonTextActive: {

-    color: "#fff",

-  },

-  familyTitle: {

-    fontWeight: "bold",

-    marginBottom: 8,

-  },

-  familyRow: {

-    flexDirection: "row",

-    alignItems: "center",

-    paddingVertical: 8,

-    borderBottomWidth: 1,

-    borderBottomColor: "#f1f5f9",

+    marginVertical: 6,

+    borderWidth: 2,

+    borderColor: colors.neutral[200],

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  activeStageCard: {

+    borderColor: colors.primary,

+    backgroundColor: '#fafbff',

+  },

+  completedStageCard: {

+    borderColor: colors.success,

+    backgroundColor: '#f0fdf4',

+  },

+  stageHeader: {

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+  stageNumber: {

+    width: 40,

+    height: 40,

+    borderRadius: 20,

+    backgroundColor: colors.neutral[200],

+    justifyContent: 'center',

+    alignItems: 'center',

+  },

+  activeStageNumber: {

+    backgroundColor: colors.primary,

+  },

+  completedStageNumber: {

+    backgroundColor: colors.success,

+  },

+

+  // Family member cards

+  familyMemberCard: {

+    backgroundColor: '#fff',

+    borderRadius: 12,

+    padding: 16,

+    marginVertical: 6,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  memberRow: {

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+  memberAvatar: {

+    width: 40,

+    height: 40,

+    borderRadius: 20,

+    backgroundColor: colors.neutral[100],

+    justifyContent: 'center',

+    alignItems: 'center',

+  },

+  editingRow: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    gap: 8,

   },

   familyEditInput: {

     flex: 1,

-    marginLeft: 6,

-    marginRight: 6,

-    height: 36,

-    minHeight: 0,

-    paddingVertical: 3,

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 8,

+    paddingHorizontal: 12,

+    paddingVertical: 8,

     fontSize: 16,

+  },

+  saveButton: {

+    padding: 8,

+    borderRadius: 8,

+    backgroundColor: colors.success + '20',

+  },

+  cancelButton: {

+    padding: 8,

+    borderRadius: 8,

+    backgroundColor: colors.danger + '20',

+  },

+  editMemberButton: {

+    padding: 8,

+    marginRight: 8,

+  },

+  removeMemberButton: {

+    padding: 8,

+  },

+

+  // Add member section

+  addMemberSection: {

+    marginTop: 20,

+    gap: 12,

+  },

+  addMemberInput: {

     borderWidth: 1,

-    borderColor: "#d1d5db",

-    borderRadius: 6,

-    padding: 10,

-    backgroundColor: "#f9fafb",

-  },

-  familyNameContainer: {

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    paddingHorizontal: 16,

+    paddingVertical: 12,

+    fontSize: 16,

+    backgroundColor: '#fff',

+  },

+  addMemberButton: {

+    backgroundColor: colors.primary,

+    borderRadius: 12,

+    paddingVertical: 12,

+    paddingHorizontal: 16,

+    flexDirection: 'row',

+    alignItems: 'center',

+    justifyContent: 'center',

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.1,

+    shadowRadius: 8,

+    elevation: 4,

+  },

+

+  // Settings section

+  settingsSection: {

+    marginTop: 32,

+    paddingTop: 24,

+    borderTopWidth: 1,

+    borderTopColor: colors.neutral[200],

+  },

+  logoutButton: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    justifyContent: 'center',

+    paddingVertical: 12,

+    paddingHorizontal: 16,

+    borderWidth: 1,

+    borderColor: colors.danger,

+    borderRadius: 12,

+    backgroundColor: '#fff',

+  },

+

+  // Notes sections

+  notesSection: {

+    marginTop: 24,

+  },

+  notesInput: {

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    paddingHorizontal: 16,

+    paddingVertical: 12,

+    fontSize: 16,

+    backgroundColor: '#fff',

+    minHeight: 80,

+    textAlignVertical: 'top',

+  },

+  addNoteSection: {

+    flexDirection: 'row',

+    gap: 12,

+    marginBottom: 20,

+  },

+  addNoteInput: {

     flex: 1,

-    marginLeft: 6,

-  },

-  familyName: {

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    paddingHorizontal: 16,

+    paddingVertical: 12,

     fontSize: 16,

-  },

-  familyStatus: {

-    marginLeft: 8,

-    color: "#22c55e",

-  },

-  familyEditButton: {

-    marginLeft: 6,

-  },

-  familyDeleteButton: {

-    marginLeft: 4,

-  },

-  addFamilyContainer: {

-    flexDirection: "row",

-    alignItems: "center",

-    marginTop: 6,

-  },

-  addFamilyInput: {

-    flex: 1,

-    marginRight: 6,

-    height: 36,

-    minHeight: 0,

-    paddingVertical: 3,

+    backgroundColor: '#fff',

+    minHeight: 60,

+    textAlignVertical: 'top',

+  },

+  addNoteButton: {

+    backgroundColor: colors.primary,

+    borderRadius: 12,

+    padding: 12,

+    justifyContent: 'center',

+    alignItems: 'center',

+    width: 60,

+    height: 60,

+  },

+  notesList: {

+    gap: 12,

+  },

+  noteCard: {

+    backgroundColor: '#fff',

+    borderRadius: 12,

+    padding: 16,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  noteHeader: {

+    flexDirection: 'row',

+    justifyContent: 'space-between',

+    alignItems: 'center',

+    marginBottom: 12,

+  },

+  noteAuthor: {

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+  noteActions: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    gap: 8,

+  },

+  noteActionButton: {

+    padding: 4,

+  },

+  noteText: {

+    lineHeight: 22,

+  },

+  editNoteContainer: {

+    gap: 12,

+  },

+  editNoteInput: {

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 8,

+    paddingHorizontal: 12,

+    paddingVertical: 8,

     fontSize: 16,

-    borderWidth: 1,

-    borderColor: "#d1d5db",

-    borderRadius: 6,

-    padding: 10,

-    backgroundColor: "#f9fafb",

-  },

-  addFamilyButton: {

-    padding: 6,

-    backgroundColor: "#2563eb",

-    borderRadius: 6,

-  },

-  syncInfo: {

-    marginTop: 18,

-    flexDirection: "row",

-    alignItems: "center",

-  },

-  syncDot: {

-    width: 8,

-    height: 8,

-    borderRadius: 4,

-    backgroundColor: "#22c55e",

-  },

-  syncText: {

-    color: "#22c55e",

-    marginLeft: 4,

-  },

-  syncSubtext: {

-    color: "#6b7280",

-    fontSize: 12,

-    marginTop: 2,

-  },

-  familyActions: {

-    marginTop: 18,

-    alignSelf: "flex-end",

-  },

-  editDogButton: {

-    flexDirection: "row",

-    alignItems: "center",

-    marginBottom: 8,

-  },

-  editDogText: {

-    color: "#6366f1",

-    marginLeft: 4,

-  },

-  logoutButton: {

-    flexDirection: "row",

-    alignItems: "center",

-    backgroundColor: "#ef4444",

+    minHeight: 80,

+    textAlignVertical: 'top',

+  },

+  editNoteActions: {

+    flexDirection: 'row',

+    gap: 8,

+  },

+  saveNoteButton: {

+    backgroundColor: colors.success,

     borderRadius: 8,

     paddingVertical: 8,

-    paddingHorizontal: 14,

-    elevation: 2,

-  },

-  logoutText: {

-    color: "#fff",

-    fontWeight: "bold",

-    marginLeft: 8,

-  },

-

-  // Notes section

-  addNoteContainer: {

-    marginBottom: 14,

-  },

-  addNoteInput: {

-    minHeight: 44,

-    paddingVertical: 10,

-    marginBottom: 8,

-    borderWidth: 1,

-    borderColor: "#d1d5db",

-    borderRadius: 6,

-    padding: 10,

-    backgroundColor: "#f9fafb",

-  },

-  addNoteButton: {

-    backgroundColor: "#2563eb",

-    alignSelf: "flex-end",

+    paddingHorizontal: 12,

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+  cancelNoteButton: {

+    backgroundColor: colors.neutral[200],

+    borderRadius: 8,

+    paddingVertical: 8,

+    paddingHorizontal: 12,

+    flexDirection: 'row',

+    alignItems: 'center',

+  },

+  notesLoadingContainer: {

+    flexDirection: 'row',

+    alignItems: 'center',

+    justifyContent: 'center',

+    paddingVertical: 20,

+  },

+  emptyNotesContainer: {

+    alignItems: 'center',

+    paddingVertical: 40,

+  },

+

+  // Tips section

+  tipsSection: {

+    marginTop: 24,

+    backgroundColor: '#fff',

+    borderRadius: 16,

+    padding: 20,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 2 },

+    shadowOpacity: 0.06,

+    shadowRadius: 8,

+    elevation: 3,

+  },

+  tipCard: {

+    flexDirection: 'row',

+    alignItems: 'flex-start',

+    paddingVertical: 12,

     paddingHorizontal: 16,

-    paddingVertical: 8,

-    borderRadius: 6,

-  },

-  addNoteButtonDisabled: {

-    opacity: 0.5,

-  },

-  addNoteButtonText: {

-    color: "#fff",

-    fontWeight: "bold",

-  },

-  noteCard: {

-    backgroundColor: "#e0e7ff",

-    borderRadius: 8,

-    padding: 10,

-    marginBottom: 10,

-  },

-  noteEditActions: {

-    flexDirection: "row",

-    justifyContent: "flex-end",

-    marginTop: 8,

-  },

-  noteCancelButton: {

-    marginRight: 12,

-    padding: 6,

-  },

-  noteCancelText: {

-    color: "#6b7280",

-  },

-  noteSaveButton: {

-    backgroundColor: "#2563eb",

-    paddingHorizontal: 12,

-    paddingVertical: 6,

-    borderRadius: 4,

-  },

-  noteSaveText: {

-    color: "#fff",

-  },

-  noteText: {

-    fontSize: 15,

-    color: "#1e293b",

-  },

-  noteFooter: {

-    flexDirection: "row",

-    justifyContent: "space-between",

-    marginTop: 5,

-    alignItems: "center",

-  },

-  noteAuthor: {

-    fontSize: 12,

-    color: "#6366f1",

-  },

-  noteActions: {

-    flexDirection: "row",

-    alignItems: "center",

-  },

-  noteEditButton: {

-    marginRight: 8,

-  },

-  noteTimestamp: {

-    fontSize: 11,

-    color: "#64748b",

-  },

-  noNotesText: {

-    color: "#6b7280",

-    fontSize: 14,

-  },

-

-  // Tips box

-  tipsBox: {

-    backgroundColor: "#2563eb",

-    borderRadius: 8,

-    padding: 12,

-    marginTop: 20,

-  },

-  tipsTitle: {

-    fontWeight: "bold",

-    color: "#fff",

-    fontSize: 16,

-    marginBottom: 8,

-  },

-  tip: {

-    color: "#fff",

-    marginBottom: 8,

-  },

-  tipLabel: {

-    fontWeight: "bold",

-  },

-  breedTipsTitle: {

-    color: "#fff",

-    fontWeight: "bold",

-    marginTop: 10,

-  },

-

-  // App footer

-  appFooter: {

-    alignItems: "center",

-    marginTop: 20,

-    marginBottom: 10,

-  },

-  appVersion: {

-    color: "#9ca3af",

-    fontSize: 12,

-  },

-  currentDateTime: {

-    color: "#9ca3af",

-    fontSize: 10,

-    marginTop: 2,

-  },

-

-  // Tab bar

+    backgroundColor: colors.warning + '10',

+    borderRadius: 12,

+    marginVertical: 4,

+  },

+

+  // Enhanced tab bar

   tabBar: {

     flexDirection: "row",

-    backgroundColor: "#dbeafe",

+    backgroundColor: colors.primary,

     position: "absolute",

     bottom: 0,

     left: 0,

     right: 0,

-    borderTopWidth: 1,

-    borderTopColor: "#1d4ed8",

-    paddingVertical: 6,

+    borderTopLeftRadius: 20,

+    borderTopRightRadius: 20,

+    paddingVertical: 12,

+    paddingBottom: 20,

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: -4 },

+    shadowOpacity: 0.15,

+    shadowRadius: 12,

+    elevation: 12,

   },

   tabButton: {

     flex: 1,

     justifyContent: "center",

     alignItems: "center",

     paddingVertical: 8,

+    borderRadius: 12,

+    marginHorizontal: 4,

   },

   tabActive: {

-    backgroundColor: "#2563eb",

+    backgroundColor: colors.secondary,

+  },

+

+  // Enhanced modal styles

+  modalOverlay: {

+    flex: 1,

+    backgroundColor: 'rgba(0,0,0,0.5)',

+    justifyContent: 'center',

+    alignItems: 'center',

+  },

+  modalContent: {

+    backgroundColor: '#fff',

+    borderRadius: 20,

+    padding: 0,

+    margin: 20,

+    maxHeight: '80%',

+    width: '90%',

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 8 },

+    shadowOpacity: 0.25,

+    shadowRadius: 20,

+    elevation: 16,

+  },

+  modalHeader: {

+    flexDirection: 'row',

+    justifyContent: 'space-between',

+    alignItems: 'center',

+    paddingHorizontal: 24,

+    paddingTop: 24,

+    paddingBottom: 16,

+    borderBottomWidth: 1,

+    borderBottomColor: colors.neutral[200],

+  },

+  modalTitle: {

+    flex: 1,

+  },

+  modalCloseButton: {

+    padding: 8,

     borderRadius: 8,

-  },

-

-  // Modal

-  centeredView: {

-    flex: 1,

-    justifyContent: "center",

-    alignItems: "center",

-    backgroundColor: "rgba(0, 0, 0, 0.5)",

-  },

-  modalView: {

-    backgroundColor: "#fff",

-    borderRadius: 12,

-    padding: 22,

-    width: "85%",

-    alignItems: "center",

-    shadowColor: "#000",

-    shadowOffset: { width: 0, height: 2 },

-    shadowOpacity: 0.25,

-    shadowRadius: 4,

-    elevation: 5,

-  },

-  modalTitle: {

-    fontWeight: "bold",

-    fontSize: 18,

-    marginBottom: 16,

+    backgroundColor: colors.neutral[100],

+  },

+  modalForm: {

+    padding: 24,

+  },

+  inputLabel: {

+    marginBottom: 8,

+    fontWeight: '600',

+    color: colors.neutral[700],

   },

   modalInput: {

     borderWidth: 1,

-    borderColor: "#d1d5db",

-    borderRadius: 6,

-    padding: 10,

-    width: "100%",

-    marginBottom: 12,

-  },

-  modalPickerInput: {

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    paddingHorizontal: 16,

+    paddingVertical: 12,

+    fontSize: 16,

+    marginBottom: 16,

+    backgroundColor: colors.neutral[50],

+  },

+  modalActions: {

+    flexDirection: 'row',

+    gap: 12,

+    marginTop: 24,

+  },

+  modalCancelButton: {

+    flex: 1,

+    paddingVertical: 12,

+    paddingHorizontal: 16,

     borderWidth: 1,

-    borderColor: "#d1d5db",

-    padding: 10,

-    marginBottom: 12,

-    borderRadius: 6,

-    width: "100%",

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    alignItems: 'center',

+  },

+  modalCancelText: {

+    color: colors.neutral[600],

+  },

+  modalSaveButton: {

+    flex: 1,

+    paddingVertical: 12,

+    paddingHorizontal: 16,

+    backgroundColor: colors.primary,

+    borderRadius: 12,

+    alignItems: 'center',

+  },

+  modalSaveText: {

+    color: '#fff',

+    fontWeight: '600',

+  },

+

+  // Picker container

+  pickerContainer: {

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    backgroundColor: colors.neutral[50],

+    marginBottom: 16,

+    overflow: 'hidden',

+  },

+  picker: {

+    height: 50,

+  },

+

+  // Celebration and status banners

+  celebrationBanner: {

+    backgroundColor: colors.warning + '20',

+    borderWidth: 1,

+    borderColor: colors.warning,

+    borderRadius: 12,

+    padding: 16,

+    flexDirection: 'row',

+    alignItems: 'center',

+    marginVertical: 8,

+  },

+  celebrationText: {

+    marginLeft: 12,

+    color: colors.warning,

+  },

+  offlineBanner: {

+    backgroundColor: colors.danger,

+    borderRadius: 8,

+    padding: 12,

+    flexDirection: 'row',

+    alignItems: 'center',

+    marginVertical: 8,

+  },

+  offlineText: {

+    color: '#fff',

+    marginLeft: 8,

+  },

+

+  // Loading and error states

+  loadingContainer: {

+    flex: 1,

+    justifyContent: 'center',

+    alignItems: 'center',

+    backgroundColor: colors.neutral[50],

+  },

+  loadingText: {

+    marginTop: 16,

+    color: colors.neutral[600],

+  },

+  errorContainer: {

+    flex: 1,

+    justifyContent: 'center',

+    alignItems: 'center',

+    backgroundColor: colors.neutral[50],

+    paddingHorizontal: 32,

+  },

+  errorTitle: {

+    marginTop: 16,

+    marginBottom: 8,

+    textAlign: 'center',

+  },

+  errorText: {

+    textAlign: 'center',

+    marginBottom: 24,

+  },

+  errorButton: {

+    backgroundColor: colors.primary,

+    borderRadius: 12,

+    paddingVertical: 12,

+    paddingHorizontal: 24,

+  },

+  errorButtonText: {

+    color: '#fff',

+    fontWeight: '600',

+  },

+

+  // Setup screens

+  setupContainer: {

+    flex: 1,

+    justifyContent: 'center',

+    paddingHorizontal: 32,

+    backgroundColor: colors.neutral[50],

+  },

+  welcomeTitle: {

+    textAlign: 'center',

+    marginBottom: 16,

+  },

+  setupText: {

+    textAlign: 'center',

+    marginBottom: 8,

+  },

+  setupSubtext: {

+    textAlign: 'center',

+    marginBottom: 32,

+  },

+  setupInput: {

+    borderWidth: 1,

+    borderColor: colors.neutral[300],

+    borderRadius: 12,

+    paddingHorizontal: 16,

+    paddingVertical: 12,

     fontSize: 16,

-  },

-  modalActions: {

-    flexDirection: "row",

-    justifyContent: "space-between",

-    width: "100%",

-  },

-  modalCancelButton: {

-    paddingVertical: 10,

-    paddingHorizontal: 16,

-    borderRadius: 6,

-    borderWidth: 1,

-    borderColor: "#d1d5db",

-  },

-  modalCancelText: {

-    color: "#6b7280",

-  },

-  modalSaveButton: {

-    backgroundColor: "#2563eb",

-    paddingVertical: 10,

-    paddingHorizontal: 16,

-    borderRadius: 6,

-  },

-  modalSaveText: {

-    color: "#fff",

-    fontWeight: "bold",

-  },

-});

-

-// Wrap the app with error boundary

-export default function App() {

-  return (

-    <ErrorBoundary>

-      <SafeAreaProvider>

-        <MainApp />

-      </SafeAreaProvider>

-    </ErrorBoundary>

-  );

-}

-                
+    marginBottom: 16,

+    backgroundColor: '#fff',

+  },

+  disabledInput: {

+    backgroundColor: colors.neutral[100],

+    color: colors.neutral[500],

+  },

+  setupButton: {

+    backgroundColor: colors.primary,

+    borderRadius: 12,

+    paddingVertical: 14,

+    alignItems: 'center',

+    shadowColor: '#000',

+    shadowOffset: { width: 0, height: 4 },

+    shadowOpacity: 0.15,

+    shadowRadius: 8,

+    elevation: 6,

+  },

+  setupButtonText: {

+    color: '#fff',

+    fontWeight: '600',

+  },

+});
